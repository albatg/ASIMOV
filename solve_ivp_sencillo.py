import numpy as np
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
import scipy.integrate as ODE

def solve_ivp_sencillo(ecuacion, Xo, tini, tfin, ciclos, parametros=[], plot=True):
    t = np.linspace(tini, tfin, ciclos)

    # Definición del modelo
    def modelo(t, x):
        dxdt = np.zeros_like(x)
        p = parametros
        locals_dict = {'x': x, 'p': p, 't': t, 'np': np}
        for n, e in enumerate(ecuacion):
            dxdt[n] = eval(e, {"__builtins__": None}, locals_dict)
        return dxdt

    r = ODE.solve_ivp(modelo, (tini, tfin), Xo, 'RK45', t_eval=t)

    if plot:
        plt.figure(1)
        for n in range(len(ecuacion)):
            plt.plot(r.t, r.y[n], label=f"Ecuación {n+1}")
        plt.title("Evolución de las variables en la glucólisis")
        plt.xlabel("Tiempo")
        plt.ylabel("Concentración")
        plt.legend()
        plt.grid(True)
        plt.show()

    return r

# Ejemplo de uso
solve_ivp_sencillo(['-(10.000000*x[0]*x[1]/(x[0]*x[1]+0.000025*x[0]+0.000025*0.000025))', 
                    '-(10.000000*x[0]*x[1]/(x[0]*x[1]+0.000025*x[0]+0.000025*0.000025))', 
                    '10.000000*x[0]*x[1]/(x[0]*x[1]+0.000025*x[0]+0.000025*0.000025)', 
                    '10.000000*x[0]*x[1]/(x[0]*x[1]+0.000025*x[0]+0.000025*0.000025)-(((10.000000*x[4]/0.000025)-(12.000000*x[5]/0.000025))/(1+x[4]/0.000025+x[5]/0.000025))', 
                    '((10.000000*x[4]/0.000025)-(12.000000*x[5]/0.000025))/(1+x[4]/0.000025+x[5]/0.000025)-(15.000000*x[5]*x[6]/(x[5]*x[6]+0.000025*x[5]+0.000025*0.000025))', 
                    '15.000000*x[5]*x[6]/(x[5]*x[6]+0.000025*x[5]+0.000025*0.000025)', 
                    '15.000000*x[5]*x[6]/(x[5]*x[6]+0.000025*x[5]+0.000025*0.000025)-(20.000000*x[6]*x[7]/(x[6]*x[7]+0.000025*x[6]+0.000025*0.000025))', 
                    '20.000000*x[6]*x[7]/(x[6]*x[7]+0.000025*x[6]+0.000025*0.000025)-(20.000000*x[7]*x[13]/(x[7]*x[13]+0.000025*x[7]+0.000025*0.000025))', 
                    '20.000000*x[7]*x[13]/(x[7]*x[13]+0.000025*x[7]+0.000025*0.000025)', 
                    '20.000000*x[7]*x[13]/(x[7]*x[13]+0.000025*x[7]+0.000025*0.000025)-(20.000000*x[2]*x[8]/(x[2]*x[8]+0.000025*x[2]+0.000025*0.000025))', 
                    '20.000000*x[2]*x[8]/(x[2]*x[8]+0.000025*x[2]+0.000025*0.000025)-(20.000000*x[8]*x[9]/(x[8]*x[9]+0.000025*x[8]+0.000025*0.000025))', 
                    '20.000000*x[8]*x[9]/(x[8]*x[9]+0.000025*x[8]+0.000025*0.000025)', 
                    '20.000000*x[8]*x[9]/(x[8]*x[9]+0.000025*x[8]+0.000025*0.000025)-(20.000000*x[9]*x[11]/(x[9]*x[11]+0.000025*x[9]+0.000025*0.000025))', 
                    '20.000000*x[9]*x[11]/(x[9]*x[11]+0.000025*x[9]+0.000025*0.000025)-(20.000000*x[11]*x[2]/(x[11]*x[2]+0.000025*x[11]+0.000025*0.000025))', 
                    '20.000000*x[11]*x[2]/(x[11]*x[2]+0.000025*x[11]+0.000025*0.000025)'], 
                   [0.560000, 0.083000, 0.078000, 0.003200, 0.001200, 0.500000, 0.450000 ,1.000000, 0.000000 ,0.078000 ,0.500000, 0.500000 ,1.000000, 0.500000 ,0.083000], 
                   1, 100, 1000)


# Llamada a la función
##¶solve_ivp_sencillo(ecuaciones, [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], 1,2 , 10000,[1,1,1,1])
